var Rr=Object.defineProperty;var Ar=(e,t,s)=>t in e?Rr(e,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):e[t]=s;var P=(e,t,s)=>Ar(e,typeof t!="symbol"?t+"":t,s);var qe=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function Sr(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function N(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function Ye(e,t,s,o){if(typeof s!="function")throw new Error("method for before hook must be a function");return o||(o={}),Array.isArray(t)?t.reverse().reduce((n,u)=>Ye.bind(null,e,u,n,o),s)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((n,u)=>u.hook.bind(null,n,o),s)():s(o))}function Fr(e,t,s,o){const n=o;e.registry[s]||(e.registry[s]=[]),t==="before"&&(o=(u,l)=>Promise.resolve().then(n.bind(null,l)).then(u.bind(null,l))),t==="after"&&(o=(u,l)=>{let g;return Promise.resolve().then(u.bind(null,l)).then(m=>(g=m,n(g,l))).then(()=>g)}),t==="error"&&(o=(u,l)=>Promise.resolve().then(u.bind(null,l)).catch(g=>n(g,l))),e.registry[s].push({hook:o,orig:n})}function Cr(e,t,s){if(!e.registry[t])return;const o=e.registry[t].map(n=>n.orig).indexOf(s);o!==-1&&e.registry[t].splice(o,1)}const je=Function.bind,$e=je.bind(je);function Dr(e,t,s){const o=$e(Cr,null).apply(null,[t]);e.api={remove:o},e.remove=o,["before","error","after","wrap"].forEach(n=>{const u=[t,n];e[n]=e.api[n]=$e(Fr,null).apply(null,u)})}function Ur(){const e={registry:{}},t=Ye.bind(null,e);return Dr(t,e),t}const Lr={Collection:Ur};var Ir="0.0.0-development",qr=`octokit-endpoint.js/${Ir} ${N()}`,jr={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":qr},mediaType:{format:""}};function $r(e){return e?Object.keys(e).reduce((t,s)=>(t[s.toLowerCase()]=e[s],t),{}):{}}function xr(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}function Xe(e,t){const s=Object.assign({},e);return Object.keys(t).forEach(o=>{xr(t[o])?o in e?s[o]=Xe(e[o],t[o]):Object.assign(s,{[o]:t[o]}):Object.assign(s,{[o]:t[o]})}),s}function xe(e){for(const t in e)e[t]===void 0&&delete e[t];return e}function ae(e,t,s){var n;if(typeof t=="string"){let[u,l]=t.split(" ");s=Object.assign(l?{method:u,url:l}:{url:u},s)}else s=Object.assign({},t);s.headers=$r(s.headers),xe(s),xe(s.headers);const o=Xe(e||{},s);return s.url==="/graphql"&&(e&&((n=e.mediaType.previews)!=null&&n.length)&&(o.mediaType.previews=e.mediaType.previews.filter(u=>!o.mediaType.previews.includes(u)).concat(o.mediaType.previews)),o.mediaType.previews=(o.mediaType.previews||[]).map(u=>u.replace(/-preview/,""))),o}function Br(e,t){const s=/\?/.test(e)?"&":"?",o=Object.keys(t);return o.length===0?e:e+s+o.map(n=>n==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${n}=${encodeURIComponent(t[n])}`).join("&")}var Hr=/\{[^{}}]+\}/g;function Wr(e){return e.replace(new RegExp("(?:^\\W+)|(?:(?<!\\W)\\W+$)","g"),"").split(/,/)}function Vr(e){const t=e.match(Hr);return t?t.map(Wr).reduce((s,o)=>s.concat(o),[]):[]}function Be(e,t){const s={__proto__:null};for(const o of Object.keys(e))t.indexOf(o)===-1&&(s[o]=e[o]);return s}function Ze(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function j(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function H(e,t,s){return t=e==="+"||e==="#"?Ze(t):j(t),s?j(s)+"="+t:t}function I(e){return e!=null}function te(e){return e===";"||e==="&"||e==="?"}function Nr(e,t,s,o){var n=e[s],u=[];if(I(n)&&n!=="")if(typeof n=="string"||typeof n=="number"||typeof n=="boolean")n=n.toString(),o&&o!=="*"&&(n=n.substring(0,parseInt(o,10))),u.push(H(t,n,te(t)?s:""));else if(o==="*")Array.isArray(n)?n.filter(I).forEach(function(l){u.push(H(t,l,te(t)?s:""))}):Object.keys(n).forEach(function(l){I(n[l])&&u.push(H(t,n[l],l))});else{const l=[];Array.isArray(n)?n.filter(I).forEach(function(g){l.push(H(t,g))}):Object.keys(n).forEach(function(g){I(n[g])&&(l.push(j(g)),l.push(H(t,n[g].toString())))}),te(t)?u.push(j(s)+"="+l.join(",")):l.length!==0&&u.push(l.join(","))}else t===";"?I(n)&&u.push(j(s)):n===""&&(t==="&"||t==="?")?u.push(j(s)+"="):n===""&&u.push("");return u}function Mr(e){return{expand:zr.bind(null,e)}}function zr(e,t){var s=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(o,n,u){if(n){let g="";const m=[];if(s.indexOf(n.charAt(0))!==-1&&(g=n.charAt(0),n=n.substr(1)),n.split(/,/g).forEach(function(T){var _=/([^:\*]*)(?::(\d+)|(\*))?/.exec(T);m.push(Nr(t,g,_[1],_[2]||_[3]))}),g&&g!=="+"){var l=",";return g==="?"?l="&":g!=="#"&&(l=g),(m.length!==0?g:"")+m.join(l)}else return m.join(",")}else return Ze(u)}),e==="/"?e:e.replace(/\/$/,"")}function er(e){var _;let t=e.method.toUpperCase(),s=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),o=Object.assign({},e.headers),n,u=Be(e,["method","baseUrl","url","headers","request","mediaType"]);const l=Vr(s);s=Mr(s).expand(u),/^http/.test(s)||(s=e.baseUrl+s);const g=Object.keys(e).filter(f=>l.includes(f)).concat("baseUrl"),m=Be(u,g);if(!/application\/octet-stream/i.test(o.accept)&&(e.mediaType.format&&(o.accept=o.accept.split(/,/).map(f=>f.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),s.endsWith("/graphql")&&(_=e.mediaType.previews)!=null&&_.length)){const f=o.accept.match(new RegExp("(?<![\\w-])[\\w-]+(?=-preview)","g"))||[];o.accept=f.concat(e.mediaType.previews).map(v=>{const w=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${v}-preview${w}`}).join(",")}return["GET","HEAD"].includes(t)?s=Br(s,m):"data"in m?n=m.data:Object.keys(m).length&&(n=m),!o["content-type"]&&typeof n<"u"&&(o["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof n>"u"&&(n=""),Object.assign({method:t,url:s,headers:o},typeof n<"u"?{body:n}:null,e.request?{request:e.request}:null)}function Kr(e,t,s){return er(ae(e,t,s))}function rr(e,t){const s=ae(e,t),o=Kr.bind(null,s);return Object.assign(o,{DEFAULTS:s,defaults:rr.bind(null,s),merge:ae.bind(null,s),parse:er})}var Qr=rr(null,jr),q={},He;function Jr(){if(He)return q;He=1;const e=function(){};e.prototype=Object.create(null);const t=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,s=/\\([\v\u0020-\u00ff])/gu,o=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,n={type:"",parameters:new e};Object.freeze(n.parameters),Object.freeze(n);function u(g){if(typeof g!="string")throw new TypeError("argument header is required and must be a string");let m=g.indexOf(";");const T=m!==-1?g.slice(0,m).trim():g.trim();if(o.test(T)===!1)throw new TypeError("invalid media type");const _={type:T.toLowerCase(),parameters:new e};if(m===-1)return _;let f,v,w;for(t.lastIndex=m;v=t.exec(g);){if(v.index!==m)throw new TypeError("invalid parameter format");m+=v[0].length,f=v[1].toLowerCase(),w=v[2],w[0]==='"'&&(w=w.slice(1,w.length-1),s.test(w)&&(w=w.replace(s,"$1"))),_.parameters[f]=w}if(m!==g.length)throw new TypeError("invalid parameter format");return _}function l(g){if(typeof g!="string")return n;let m=g.indexOf(";");const T=m!==-1?g.slice(0,m).trim():g.trim();if(o.test(T)===!1)return n;const _={type:T.toLowerCase(),parameters:new e};if(m===-1)return _;let f,v,w;for(t.lastIndex=m;v=t.exec(g);){if(v.index!==m)return n;m+=v[0].length,f=v[1].toLowerCase(),w=v[2],w[0]==='"'&&(w=w.slice(1,w.length-1),s.test(w)&&(w=w.replace(s,"$1"))),_.parameters[f]=w}return m!==g.length?n:_}return q.default={parse:u,safeParse:l},q.parse=u,q.safeParse=l,q.defaultContentType=n,q}var Yr=Jr();class W extends Error{constructor(s,o,n){super(s);P(this,"name");P(this,"status");P(this,"request");P(this,"response");this.name="HttpError",this.status=Number.parseInt(o),Number.isNaN(this.status)&&(this.status=0),"response"in n&&(this.response=n.response);const u=Object.assign({},n.request);n.request.headers.authorization&&(u.headers=Object.assign({},n.request.headers,{authorization:n.request.headers.authorization.replace(new RegExp("(?<! ) .*$")," [REDACTED]")})),u.url=u.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=u}}var Xr="0.0.0-development",Zr={headers:{"user-agent":`octokit-request.js/${Xr} ${N()}`}};function et(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;const t=Object.getPrototypeOf(e);if(t===null)return!0;const s=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof s=="function"&&s instanceof s&&Function.prototype.call(s)===Function.prototype.call(e)}async function We(e){var f,v,w,F,R;const t=((f=e.request)==null?void 0:f.fetch)||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");const s=((v=e.request)==null?void 0:v.log)||console,o=((w=e.request)==null?void 0:w.parseSuccessResponseBody)!==!1,n=et(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,u=Object.fromEntries(Object.entries(e.headers).map(([y,k])=>[y,String(k)]));let l;try{l=await t(e.url,{method:e.method,body:n,redirect:(F=e.request)==null?void 0:F.redirect,headers:u,signal:(R=e.request)==null?void 0:R.signal,...e.body&&{duplex:"half"}})}catch(y){let k="Unknown Error";if(y instanceof Error){if(y.name==="AbortError")throw y.status=500,y;k=y.message,y.name==="TypeError"&&"cause"in y&&(y.cause instanceof Error?k=y.cause.message:typeof y.cause=="string"&&(k=y.cause))}const A=new W(k,500,{request:e});throw A.cause=y,A}const g=l.status,m=l.url,T={};for(const[y,k]of l.headers)T[y]=k;const _={url:m,status:g,headers:T,data:""};if("deprecation"in T){const y=T.link&&T.link.match(/<([^<>]+)>; rel="deprecation"/),k=y&&y.pop();s.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${T.sunset}${k?`. See ${k}`:""}`)}if(g===204||g===205)return _;if(e.method==="HEAD"){if(g<400)return _;throw new W(l.statusText,g,{response:_,request:e})}if(g===304)throw _.data=await se(l),new W("Not modified",g,{response:_,request:e});if(g>=400)throw _.data=await se(l),new W(tt(_.data),g,{response:_,request:e});return _.data=o?await se(l):l.body,_}async function se(e){var o;const t=e.headers.get("content-type");if(!t)return e.text().catch(()=>"");const s=Yr.safeParse(t);if(rt(s)){let n="";try{return n=await e.text(),JSON.parse(n)}catch{return n}}else return s.type.startsWith("text/")||((o=s.parameters.charset)==null?void 0:o.toLowerCase())==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))}function rt(e){return e.type==="application/json"||e.type==="application/scim+json"}function tt(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){const t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(s=>JSON.stringify(s)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function ce(e,t){const s=e.defaults(t);return Object.assign(function(n,u){const l=s.merge(n,u);if(!l.request||!l.request.hook)return We(s.parse(l));const g=(m,T)=>We(s.parse(s.merge(m,T)));return Object.assign(g,{endpoint:s,defaults:ce.bind(null,s)}),l.request.hook(g,l)},{endpoint:s,defaults:ce.bind(null,s)})}var ue=ce(Qr,Zr),st="0.0.0-development";function ot(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var nt=class extends Error{constructor(t,s,o){super(ot(o));P(this,"name","GraphqlResponseError");P(this,"errors");P(this,"data");this.request=t,this.headers=s,this.response=o,this.errors=o.errors,this.data=o.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},it=["method","baseUrl","url","headers","request","query","mediaType","operationName"],at=["query","method","url"],Ve=/\/api\/v3\/?$/;function ct(e,t,s){if(s){if(typeof t=="string"&&"query"in s)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(const l in s)if(at.includes(l))return Promise.reject(new Error(`[@octokit/graphql] "${l}" cannot be used as variable name`))}const o=typeof t=="string"?Object.assign({query:t},s):t,n=Object.keys(o).reduce((l,g)=>it.includes(g)?(l[g]=o[g],l):(l.variables||(l.variables={}),l.variables[g]=o[g],l),{}),u=o.baseUrl||e.endpoint.DEFAULTS.baseUrl;return Ve.test(u)&&(n.url=u.replace(Ve,"/api/graphql")),e(n).then(l=>{if(l.data.errors){const g={};for(const m of Object.keys(l.headers))g[m]=l.headers[m];throw new nt(n,g,l.data)}return l.data.data})}function le(e,t){const s=e.defaults(t);return Object.assign((n,u)=>ct(s,n,u),{defaults:le.bind(null,s),endpoint:s.endpoint})}le(ue,{headers:{"user-agent":`octokit-graphql.js/${st} ${N()}`},method:"POST",url:"/graphql"});function ut(e){return le(e,{method:"POST",url:"/graphql"})}var oe="(?:[a-zA-Z0-9_-]+)",Ne="\\.",Me=new RegExp(`^${oe}${Ne}${oe}${Ne}${oe}$`),lt=Me.test.bind(Me);async function pt(e){const t=lt(e),s=e.startsWith("v1.")||e.startsWith("ghs_"),o=e.startsWith("ghu_");return{type:"token",token:e,tokenType:t?"app":s?"installation":o?"user-to-server":"oauth"}}function gt(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}async function dt(e,t,s,o){const n=t.endpoint.merge(s,o);return n.headers.authorization=gt(e),t(n)}var mt=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(pt.bind(null,t),{hook:dt.bind(null,t)})};const tr="6.1.5",ze=()=>{},ht=console.warn.bind(console),Et=console.error.bind(console),Ke=`octokit-core.js/${tr} ${N()}`;var K;let sr=(K=class{constructor(t={}){P(this,"request");P(this,"graphql");P(this,"log");P(this,"hook");P(this,"auth");const s=new Lr.Collection,o={baseUrl:ue.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},t.request,{hook:s.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=t.userAgent?`${t.userAgent} ${Ke}`:Ke,t.baseUrl&&(o.baseUrl=t.baseUrl),t.previews&&(o.mediaType.previews=t.previews),t.timeZone&&(o.headers["time-zone"]=t.timeZone),this.request=ue.defaults(o),this.graphql=ut(this.request).defaults(o),this.log=Object.assign({debug:ze,info:ze,warn:ht,error:Et},t.log),this.hook=s,t.authStrategy){const{authStrategy:u,...l}=t,g=u(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:l},t.auth));s.wrap("request",g.hook),this.auth=g}else if(!t.auth)this.auth=async()=>({type:"unauthenticated"});else{const u=mt(t.auth);s.wrap("request",u.hook),this.auth=u}const n=this.constructor;for(let u=0;u<n.plugins.length;++u)Object.assign(this,n.plugins[u](this,t))}static defaults(t){return class extends this{constructor(...o){const n=o[0]||{};if(typeof t=="function"){super(t(n));return}super(Object.assign({},t,n,n.userAgent&&t.userAgent?{userAgent:`${n.userAgent} ${t.userAgent}`}:null))}}}static plugin(...t){var n;const s=this.plugins;return n=class extends this{},P(n,"plugins",s.concat(t.filter(u=>!s.includes(u)))),n}},P(K,"VERSION",tr),P(K,"plugins",[]),K);var Tt="0.0.0-development";function _t(e){if(!e.data)return{...e,data:[]};if(!("total_count"in e.data&&!("url"in e.data)))return e;const s=e.data.incomplete_results,o=e.data.repository_selection,n=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;const u=Object.keys(e.data)[0],l=e.data[u];return e.data=l,typeof s<"u"&&(e.data.incomplete_results=s),typeof o<"u"&&(e.data.repository_selection=o),e.data.total_count=n,e}function pe(e,t,s){const o=typeof t=="function"?t.endpoint(s):e.request.endpoint(t,s),n=typeof t=="function"?t:e.request,u=o.method,l=o.headers;let g=o.url;return{[Symbol.asyncIterator]:()=>({async next(){if(!g)return{done:!0};try{const m=await n({method:u,url:g,headers:l}),T=_t(m);return g=((T.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:T}}catch(m){if(m.status!==409)throw m;return g="",{value:{status:200,headers:{},data:[]}}}}})}}function or(e,t,s,o){return typeof s=="function"&&(o=s,s=void 0),nr(e,[],pe(e,t,s)[Symbol.asyncIterator](),o)}function nr(e,t,s,o){return s.next().then(n=>{if(n.done)return t;let u=!1;function l(){u=!0}return t=t.concat(o?o(n.value,l):n.value.data),u?t:nr(e,t,s,o)})}Object.assign(or,{iterator:pe});function ir(e){return{paginate:Object.assign(or.bind(null,e),{iterator:pe.bind(null,e)})}}ir.VERSION=Tt;var ft=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,wt=class extends Error{constructor(t,s){super(ft(t.pathInQuery,s));P(this,"name","MissingCursorChangeError");this.pageInfo=t,this.cursorValue=s,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},bt=class extends Error{constructor(t){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(t,null,2)}`);P(this,"name","MissingPageInfo");this.response=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}},yt=e=>Object.prototype.toString.call(e)==="[object Object]";function ar(e){const t=cr(e,"pageInfo");if(t.length===0)throw new bt(e);return t}var cr=(e,t,s=[])=>{for(const o of Object.keys(e)){const n=[...s,o],u=e[o];if(yt(u)){if(u.hasOwnProperty(t))return n;const l=cr(u,t,n);if(l.length>0)return l}}return[]},V=(e,t)=>t.reduce((s,o)=>s[o],e),ne=(e,t,s)=>{const o=t[t.length-1],n=[...t].slice(0,-1),u=V(e,n);typeof s=="function"?u[o]=s(u[o]):u[o]=s},vt=e=>{const t=ar(e);return{pathInQuery:t,pageInfo:V(e,[...t,"pageInfo"])}},ur=e=>e.hasOwnProperty("hasNextPage"),Pt=e=>ur(e)?e.endCursor:e.startCursor,kt=e=>ur(e)?e.hasNextPage:e.hasPreviousPage,lr=e=>(t,s={})=>{let o=!0,n={...s};return{[Symbol.asyncIterator]:()=>({async next(){if(!o)return{done:!0,value:{}};const u=await e.graphql(t,n),l=vt(u),g=Pt(l.pageInfo);if(o=kt(l.pageInfo),o&&g===n.cursor)throw new wt(l,g);return n={...n,cursor:g},{done:!1,value:u}}})}},Gt=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);const s=ar(e),o=[...s,"nodes"],n=V(t,o);n&&ne(e,o,m=>[...m,...n]);const u=[...s,"edges"],l=V(t,u);l&&ne(e,u,m=>[...m,...l]);const g=[...s,"pageInfo"];return ne(e,g,V(t,g)),e},Ot=e=>{const t=lr(e);return async(s,o={})=>{let n={};for await(const u of t(s,o))n=Gt(n,u);return n}};function Rt(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(Ot(e),{iterator:lr(e)})})}}const At="14.0.0",St={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createHostedRunnerForOrg:["POST /orgs/{org}/actions/hosted-runners"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteHostedRunnerForOrg:["DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getHostedRunnerForOrg:["GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],getHostedRunnersGithubOwnedImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/github-owned"],getHostedRunnersLimitsForOrg:["GET /orgs/{org}/actions/hosted-runners/limits"],getHostedRunnersMachineSpecsForOrg:["GET /orgs/{org}/actions/hosted-runners/machine-sizes"],getHostedRunnersPartnerImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/partner"],getHostedRunnersPlatformsForOrg:["GET /orgs/{org}/actions/hosted-runners/platforms"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listGithubHostedRunnersInGroupForOrg:["GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"],listHostedRunnersForOrg:["GET /orgs/{org}/actions/hosted-runners"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateHostedRunnerForOrg:["PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},campaigns:{createCampaign:["POST /orgs/{org}/campaigns"],deleteCampaign:["DELETE /orgs/{org}/campaigns/{campaign_number}"],getCampaignSummary:["GET /orgs/{org}/campaigns/{campaign_number}"],listOrgCampaigns:["GET /orgs/{org}/campaigns"],updateCampaign:["PATCH /orgs/{org}/campaigns/{campaign_number}"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},hostedCompute:{createNetworkConfigurationForOrg:["POST /orgs/{org}/settings/network-configurations"],deleteNetworkConfigurationFromOrg:["DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkConfigurationForOrg:["GET /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkSettingsForOrg:["GET /orgs/{org}/settings/network-settings/{network_settings_id}"],listNetworkConfigurationsForOrg:["GET /orgs/{org}/settings/network-configurations"],updateNetworkConfigurationForOrg:["PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createIssueType:["POST /orgs/{org}/issue-types"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteIssueType:["DELETE /orgs/{org}/issue-types/{issue_type_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getOrgRulesetHistory:["GET /orgs/{org}/rulesets/{ruleset_id}/history"],getOrgRulesetVersion:["GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listIssueTypes:["GET /orgs/{org}/issue-types"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateIssueType:["PUT /orgs/{org}/issue-types/{issue_type_id}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesetHistory:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history"],getRepoRulesetVersion:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues",{},{deprecated:"octokit.rest.search.issuesAndPullRequests() is deprecated, see https://docs.github.com/rest/search/search#search-issues-and-pull-requests"}],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}};var Ft=St;const U=new Map;for(const[e,t]of Object.entries(Ft))for(const[s,o]of Object.entries(t)){const[n,u,l]=o,[g,m]=n.split(/ /),T=Object.assign({method:g,url:m},u);U.has(e)||U.set(e,new Map),U.get(e).set(s,{scope:e,methodName:s,endpointDefaults:T,decorations:l})}const Ct={has({scope:e},t){return U.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,s){return Object.defineProperty(e.cache,t,s),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...U.get(e).keys()]},set(e,t,s){return e.cache[t]=s},get({octokit:e,scope:t,cache:s},o){if(s[o])return s[o];const n=U.get(t).get(o);if(!n)return;const{endpointDefaults:u,decorations:l}=n;return l?s[o]=Ut(e,t,o,u,l):s[o]=e.request.defaults(u),s[o]}};function Dt(e){const t={};for(const s of U.keys())t[s]=new Proxy({octokit:e,scope:s,cache:{}},Ct);return t}function Ut(e,t,s,o,n){const u=e.request.defaults(o);function l(...g){let m=u.endpoint.merge(...g);if(n.mapToData)return m=Object.assign({},m,{data:m[n.mapToData],[n.mapToData]:void 0}),u(m);if(n.renamed){const[T,_]=n.renamed;e.log.warn(`octokit.${t}.${s}() has been renamed to octokit.${T}.${_}()`)}if(n.deprecated&&e.log.warn(n.deprecated),n.renamedParameters){const T=u.endpoint.merge(...g);for(const[_,f]of Object.entries(n.renamedParameters))_ in T&&(e.log.warn(`"${_}" parameter is deprecated for "octokit.${t}.${s}()". Use "${f}" instead`),f in T||(T[f]=T[_]),delete T[_]);return u(T)}return u(...g)}return Object.assign(l,u)}function pr(e){return{rest:Dt(e)}}pr.VERSION=At;var Q={exports:{}},Lt=Q.exports,Qe;function It(){return Qe||(Qe=1,function(e,t){(function(s,o){e.exports=o()})(Lt,function(){var s=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof qe<"u"?qe:typeof self<"u"?self:{};function o(E){return E&&E.default||E}var n=function(E,i,r={}){var a,c,p;for(a in i)p=i[a],r[a]=(c=E[a])!=null?c:p;return r},u=function(E,i,r={}){var a,c;for(a in E)c=E[a],i[a]!==void 0&&(r[a]=c);return r},l={load:n,overwrite:u},g;g=class{constructor(i,r){this.incr=i,this.decr=r,this._first=null,this._last=null,this.length=0}push(i){var r;this.length++,typeof this.incr=="function"&&this.incr(),r={value:i,prev:this._last,next:null},this._last!=null?(this._last.next=r,this._last=r):this._first=this._last=r}shift(){var i;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),i=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,i}first(){if(this._first!=null)return this._first.value}getArray(){var i,r,a;for(i=this._first,a=[];i!=null;)a.push((r=i,i=i.next,r.value));return a}forEachShift(i){var r;for(r=this.shift();r!=null;)i(r),r=this.shift()}debug(){var i,r,a,c,p;for(i=this._first,p=[];i!=null;)p.push((r=i,i=i.next,{value:r.value,prev:(a=r.prev)!=null?a.value:void 0,next:(c=r.next)!=null?c.value:void 0}));return p}};var m=g,T;T=class{constructor(i){if(this.instance=i,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(r,a)=>this._addListener(r,"many",a),this.instance.once=(r,a)=>this._addListener(r,"once",a),this.instance.removeAllListeners=(r=null)=>r!=null?delete this._events[r]:this._events={}}_addListener(i,r,a){var c;return(c=this._events)[i]==null&&(c[i]=[]),this._events[i].push({cb:a,status:r}),this.instance}listenerCount(i){return this._events[i]!=null?this._events[i].length:0}async trigger(i,...r){var a,c;try{return i!=="debug"&&this.trigger("debug",`Event triggered: ${i}`,r),this._events[i]==null?void 0:(this._events[i]=this._events[i].filter(function(p){return p.status!=="none"}),c=this._events[i].map(async p=>{var d,h;if(p.status!=="none"){p.status==="once"&&(p.status="none");try{return h=typeof p.cb=="function"?p.cb(...r):void 0,typeof(h!=null?h.then:void 0)=="function"?await h:h}catch(b){return d=b,this.trigger("error",d),null}}}),(await Promise.all(c)).find(function(p){return p!=null}))}catch(p){return a=p,this.trigger("error",a),null}}};var _=T,f,v,w;f=m,v=_,w=class{constructor(i){this.Events=new v(this),this._length=0,this._lists=(function(){var r,a,c;for(c=[],r=1,a=i;1<=a?r<=a:r>=a;1<=a?++r:--r)c.push(new f(()=>this.incr(),()=>this.decr()));return c}).call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(i){return this._lists[i.options.priority].push(i)}queued(i){return i!=null?this._lists[i].length:this._length}shiftAll(i){return this._lists.forEach(function(r){return r.forEachShift(i)})}getFirst(i=this._lists){var r,a,c;for(r=0,a=i.length;r<a;r++)if(c=i[r],c.length>0)return c;return[]}shiftLastFrom(i){return this.getFirst(this._lists.slice(i).reverse()).shift()}};var F=w,R;R=class extends Error{};var y=R,k,A,M,$,x;$=10,A=5,x=l,k=y,M=class{constructor(i,r,a,c,p,d,h,b){this.task=i,this.args=r,this.rejectOnDrop=p,this.Events=d,this._states=h,this.Promise=b,this.options=x.load(a,c),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===c.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((G,O)=>{this._resolve=G,this._reject=O}),this.retryCount=0}_sanitizePriority(i){var r;return r=~~i!==i?A:i,r<0?0:r>$-1?$-1:r}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:i,message:r="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(i??new k(r)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(i){var r;if(r=this._states.jobStatus(this.options.id),!(r===i||i==="DONE"&&r===null))throw new k(`Invalid job status ${r}, expected ${i}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(i,r){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:i,blocked:r})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}async doExecute(i,r,a,c){var p,d,h;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),d={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",d);try{if(h=await(i!=null?i.schedule(this.options,this.task,...this.args):this.task(...this.args)),r())return this.doDone(d),await c(this.options,d),this._assertStatus("DONE"),this._resolve(h)}catch(b){return p=b,this._onFailure(p,d,r,a,c)}}doExpire(i,r,a){var c,p;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),p={args:this.args,options:this.options,retryCount:this.retryCount},c=new k(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(c,p,i,r,a)}async _onFailure(i,r,a,c,p){var d,h;if(a())return d=await this.Events.trigger("failed",i,r),d!=null?(h=~~d,this.Events.trigger("retry",`Retrying ${this.options.id} after ${h} ms`,r),this.retryCount++,c(h)):(this.doDone(r),await p(this.options,r),this._assertStatus("DONE"),this._reject(i))}doDone(i){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",i)}};var C=M,L,J,Y;Y=l,L=y,J=class{constructor(i,r,a){this.instance=i,this.storeOptions=r,this.clientId=this.instance._randomIndex(),Y.load(a,a,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var i;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(i=this.heartbeat=setInterval(()=>{var r,a,c,p,d;if(p=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&p>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=p,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&p>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:r,reservoirIncreaseMaximum:c,reservoir:d}=this.storeOptions,this._lastReservoirIncrease=p,a=c!=null?Math.min(r,c-d):r,a>0))return this.storeOptions.reservoir+=a,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?i.unref():void 0:clearInterval(this.heartbeat)}async __publish__(i){return await this.yieldLoop(),this.instance.Events.trigger("message",i.toString())}async __disconnect__(i){return await this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()}yieldLoop(i=0){return new this.Promise(function(r,a){return setTimeout(r,i)})}computePenalty(){var i;return(i=this.storeOptions.penalty)!=null?i:15*this.storeOptions.minTime||5e3}async __updateSettings__(i){return await this.yieldLoop(),Y.overwrite(i,i,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0}async __running__(){return await this.yieldLoop(),this._running}async __queued__(){return await this.yieldLoop(),this.instance.queued()}async __done__(){return await this.yieldLoop(),this._done}async __groupCheck__(i){return await this.yieldLoop(),this._nextRequest+this.timeout<i}computeCapacity(){var i,r;return{maxConcurrent:i,reservoir:r}=this.storeOptions,i!=null&&r!=null?Math.min(i-this._running,r):i!=null?i-this._running:r??null}conditionsCheck(i){var r;return r=this.computeCapacity(),r==null||i<=r}async __incrementReservoir__(i){var r;return await this.yieldLoop(),r=this.storeOptions.reservoir+=i,this.instance._drainAll(this.computeCapacity()),r}async __currentReservoir__(){return await this.yieldLoop(),this.storeOptions.reservoir}isBlocked(i){return this._unblockTime>=i}check(i,r){return this.conditionsCheck(i)&&this._nextRequest-r<=0}async __check__(i){var r;return await this.yieldLoop(),r=Date.now(),this.check(i,r)}async __register__(i,r,a){var c,p;return await this.yieldLoop(),c=Date.now(),this.conditionsCheck(r)?(this._running+=r,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=r),p=Math.max(this._nextRequest-c,0),this._nextRequest=c+p+this.storeOptions.minTime,{success:!0,wait:p,reservoir:this.storeOptions.reservoir}):{success:!1}}strategyIsBlock(){return this.storeOptions.strategy===3}async __submit__(i,r){var a,c,p;if(await this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&r>this.storeOptions.maxConcurrent)throw new L(`Impossible to add a job having a weight of ${r} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return c=Date.now(),p=this.storeOptions.highWater!=null&&i===this.storeOptions.highWater&&!this.check(r,c),a=this.strategyIsBlock()&&(p||this.isBlocked(c)),a&&(this._unblockTime=c+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:p,blocked:a,strategy:this.storeOptions.strategy}}async __free__(i,r){return await this.yieldLoop(),this._running-=r,this._done+=r,this.instance._drainAll(this.computeCapacity()),{running:this._running}}};var Er=J,de,me;de=y,me=class{constructor(i){this.status=i,this._jobs={},this.counts=this.status.map(function(){return 0})}next(i){var r,a;if(r=this._jobs[i],a=r+1,r!=null&&a<this.status.length)return this.counts[r]--,this.counts[a]++,this._jobs[i]++;if(r!=null)return this.counts[r]--,delete this._jobs[i]}start(i){var r;return r=0,this._jobs[i]=r,this.counts[r]++}remove(i){var r;return r=this._jobs[i],r!=null&&(this.counts[r]--,delete this._jobs[i]),r!=null}jobStatus(i){var r;return(r=this.status[this._jobs[i]])!=null?r:null}statusJobs(i){var r,a,c,p,d;if(i!=null){if(a=this.status.indexOf(i),a<0)throw new de(`status must be one of ${this.status.join(", ")}`);c=this._jobs,p=[];for(r in c)d=c[r],d===a&&p.push(r);return p}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((i,r,a)=>(i[this.status[a]]=r,i),{})}};var Tr=me,he,Ee;he=m,Ee=class{constructor(i,r){this.schedule=this.schedule.bind(this),this.name=i,this.Promise=r,this._running=0,this._queue=new he}isEmpty(){return this._queue.length===0}async _tryToRun(){var i,r,a,c,p,d,h;if(this._running<1&&this._queue.length>0)return this._running++,{task:h,args:i,resolve:p,reject:c}=this._queue.shift(),r=await async function(){try{return d=await h(...i),function(){return p(d)}}catch(b){return a=b,function(){return c(a)}}}(),this._running--,this._tryToRun(),r()}schedule(i,...r){var a,c,p;return p=c=null,a=new this.Promise(function(d,h){return p=d,c=h}),this._queue.push({task:i,args:r,resolve:p,reject:c}),this._tryToRun(),a}};var _r=Ee,Te="2.19.5",fr={version:Te},wr=Object.freeze({version:Te,default:fr}),_e=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),fe=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),br=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),we,be,ye,ve,Pe,z;z=l,we=_,ve=_e,ye=fe,Pe=br,be=(function(){class E{constructor(r={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=r,z.load(this.limiterOptions,this.defaults,this),this.Events=new we(this),this.instances={},this.Bottleneck=Le,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new ve(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new ye(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(r=""){var a;return(a=this.instances[r])!=null?a:(()=>{var c;return c=this.instances[r]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${r}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",c,r),c})()}async deleteKey(r=""){var a,c;return c=this.instances[r],this.connection&&(a=await this.connection.__runCommand__(["del",...Pe.allKeys(`${this.id}-${r}`)])),c!=null&&(delete this.instances[r],await c.disconnect()),c!=null||a>0}limiters(){var r,a,c,p;a=this.instances,c=[];for(r in a)p=a[r],c.push({key:r,limiter:p});return c}keys(){return Object.keys(this.instances)}async clusterKeys(){var r,a,c,p,d,h,b,G,O;if(this.connection==null)return this.Promise.resolve(this.keys());for(h=[],r=null,O=`b_${this.id}-`.length,a=9;r!==0;)for([G,c]=await this.connection.__runCommand__(["scan",r??0,"match",`b_${this.id}-*_settings`,"count",1e4]),r=~~G,p=0,b=c.length;p<b;p++)d=c[p],h.push(d.slice(O,-a));return h}_startAutoCleanup(){var r;return clearInterval(this.interval),typeof(r=this.interval=setInterval(async()=>{var a,c,p,d,h,b;h=Date.now(),p=this.instances,d=[];for(c in p){b=p[c];try{await b._store.__groupCheck__(h)?d.push(this.deleteKey(c)):d.push(void 0)}catch(G){a=G,d.push(b.Events.trigger("error",a))}}return d},this.timeout/2)).unref=="function"?r.unref():void 0}updateSettings(r={}){if(z.overwrite(r,this.defaults,this),z.overwrite(r,r,this.limiterOptions),r.timeout!=null)return this._startAutoCleanup()}disconnect(r=!0){var a;if(!this.sharedConnection)return(a=this.connection)!=null?a.disconnect(r):void 0}}return E.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},E}).call(s);var yr=be,ke,Ge,Oe;Oe=l,Ge=_,ke=(function(){class E{constructor(r={}){this.options=r,Oe.load(this.options,this.defaults,this),this.Events=new Ge(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((r,a)=>this._resolve=r)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(r){var a;return this._arr.push(r),a=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),a}}return E.prototype.defaults={maxTime:null,maxSize:null,Promise},E}).call(s);var vr=ke,Pr=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),kr=o(wr),Re,Ae,X,Z,Se,ee,Fe,Ce,De,re,S,Ue=[].splice;ee=10,Ae=5,S=l,Fe=F,Z=C,Se=Er,Ce=Pr,X=_,De=Tr,re=_r,Re=(function(){class E{constructor(r={},...a){var c,p;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(r,a),S.load(r,this.instanceDefaults,this),this._queues=new Fe(ee),this._scheduled={},this._states=new De(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new X(this),this._submitLock=new re("submit",this.Promise),this._registerLock=new re("register",this.Promise),p=S.load(r,this.storeDefaults,{}),this._store=(function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return c=S.load(r,this.redisStoreDefaults,{}),new Ce(this,p,c);if(this.datastore==="local")return c=S.load(r,this.localStoreDefaults,{}),new Se(this,p,c);throw new E.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}).call(this),this._queues.on("leftzero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.ref=="function"?d.ref():void 0}),this._queues.on("zero",()=>{var d;return(d=this._store.heartbeat)!=null&&typeof d.unref=="function"?d.unref():void 0})}_validateOptions(r,a){if(!(r!=null&&typeof r=="object"&&a.length===0))throw new E.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(r){return this._store.__publish__(r)}disconnect(r=!0){return this._store.__disconnect__(r)}chain(r){return this._limiter=r,this}queued(r){return this._queues.queued(r)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(r){return this._states.jobStatus(r)}jobs(r){return this._states.statusJobs(r)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(r=1){return this._store.__check__(r)}_clearGlobalState(r){return this._scheduled[r]!=null?(clearTimeout(this._scheduled[r].expiration),delete this._scheduled[r],!0):!1}async _free(r,a,c,p){var d,h;try{if({running:h}=await this._store.__free__(r,c.weight),this.Events.trigger("debug",`Freed ${c.id}`,p),h===0&&this.empty())return this.Events.trigger("idle")}catch(b){return d=b,this.Events.trigger("error",d)}}_run(r,a,c){var p,d,h;return a.doRun(),p=this._clearGlobalState.bind(this,r),h=this._run.bind(this,r,a),d=this._free.bind(this,r,a),this._scheduled[r]={timeout:setTimeout(()=>a.doExecute(this._limiter,p,h,d),c),expiration:a.options.expiration!=null?setTimeout(function(){return a.doExpire(p,h,d)},c+a.options.expiration):void 0,job:a}}_drainOne(r){return this._registerLock.schedule(()=>{var a,c,p,d,h;return this.queued()===0?this.Promise.resolve(null):(h=this._queues.getFirst(),{options:d,args:a}=p=h.first(),r!=null&&d.weight>r?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${d.id}`,{args:a,options:d}),c=this._randomIndex(),this._store.__register__(c,d.weight,d.expiration).then(({success:b,wait:G,reservoir:O})=>{var B;return this.Events.trigger("debug",`Drained ${d.id}`,{success:b,args:a,options:d}),b?(h.shift(),B=this.empty(),B&&this.Events.trigger("empty"),O===0&&this.Events.trigger("depleted",B),this._run(c,p,G),this.Promise.resolve(d.weight)):this.Promise.resolve(null)})))})}_drainAll(r,a=0){return this._drainOne(r).then(c=>{var p;return c!=null?(p=r!=null?r-c:r,this._drainAll(p,a+c)):this.Promise.resolve(a)}).catch(c=>this.Events.trigger("error",c))}_dropAllQueued(r){return this._queues.shiftAll(function(a){return a.doDrop({message:r})})}stop(r={}){var a,c;return r=S.load(r,this.stopDefaults),c=p=>{var d;return d=()=>{var h;return h=this._states.counts,h[0]+h[1]+h[2]+h[3]===p},new this.Promise((h,b)=>d()?h():this.on("done",()=>{if(d())return this.removeAllListeners("done"),h()}))},a=r.dropWaitingJobs?(this._run=function(p,d){return d.doDrop({message:r.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var p,d,h;d=this._scheduled;for(p in d)h=d[p],this.jobStatus(h.job.options.id)==="RUNNING"&&(clearTimeout(h.timeout),clearTimeout(h.expiration),h.job.doDrop({message:r.dropErrorMessage}));return this._dropAllQueued(r.dropErrorMessage),c(0)}))):this.schedule({priority:ee-1,weight:0},()=>c(1)),this._receive=function(p){return p._reject(new E.prototype.BottleneckError(r.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new E.prototype.BottleneckError("stop() has already been called")),a}async _addToQueue(r){var a,c,p,d,h,b,G;({args:a,options:d}=r);try{({reachedHWM:h,blocked:c,strategy:G}=await this._store.__submit__(this.queued(),d.weight))}catch(O){return p=O,this.Events.trigger("debug",`Could not queue ${d.id}`,{args:a,options:d,error:p}),r.doDrop({error:p}),!1}return c?(r.doDrop(),!0):h&&(b=G===E.prototype.strategy.LEAK?this._queues.shiftLastFrom(d.priority):G===E.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(d.priority+1):G===E.prototype.strategy.OVERFLOW?r:void 0,b!=null&&b.doDrop(),b==null||G===E.prototype.strategy.OVERFLOW)?(b==null&&r.doDrop(),h):(r.doQueue(h,c),this._queues.push(r),await this._drainAll(),h)}_receive(r){return this._states.jobStatus(r.options.id)!=null?(r._reject(new E.prototype.BottleneckError(`A job with the same id already exists (id=${r.options.id})`)),!1):(r.doReceive(),this._submitLock.schedule(this._addToQueue,r))}submit(...r){var a,c,p,d,h,b,G;return typeof r[0]=="function"?(h=r,[c,...r]=h,[a]=Ue.call(r,-1),d=S.load({},this.jobDefaults)):(b=r,[d,c,...r]=b,[a]=Ue.call(r,-1),d=S.load(d,this.jobDefaults)),G=(...O)=>new this.Promise(function(B,Or){return c(...O,function(...Ie){return(Ie[0]!=null?Or:B)(Ie)})}),p=new Z(G,r,d,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),p.promise.then(function(O){return typeof a=="function"?a(...O):void 0}).catch(function(O){return Array.isArray(O)?typeof a=="function"?a(...O):void 0:typeof a=="function"?a(O):void 0}),this._receive(p)}schedule(...r){var a,c,p;return typeof r[0]=="function"?([p,...r]=r,c={}):[c,p,...r]=r,a=new Z(p,r,c,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(a),a.promise}wrap(r){var a,c;return a=this.schedule.bind(this),c=function(...p){return a(r.bind(this),...p)},c.withOptions=function(p,...d){return a(p,r,...d)},c}async updateSettings(r={}){return await this._store.__updateSettings__(S.overwrite(r,this.storeDefaults)),S.overwrite(r,this.instanceDefaults,this),this}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(r=0){return this._store.__incrementReservoir__(r)}}return E.default=E,E.Events=X,E.version=E.prototype.version=kr.version,E.strategy=E.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},E.BottleneckError=E.prototype.BottleneckError=y,E.Group=E.prototype.Group=yr,E.RedisConnection=E.prototype.RedisConnection=_e,E.IORedisConnection=E.prototype.IORedisConnection=fe,E.Batcher=E.prototype.Batcher=vr,E.prototype.jobDefaults={priority:Ae,weight:1,expiration:null,id:"<no-id>"},E.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:E.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},E.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},E.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},E.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},E.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},E}).call(s);var Le=Re,Gr=Le;return Gr})}(Q)),Q.exports}var qt=It();const gr=Sr(qt);var jt="0.0.0-development";async function dr(e,t,s,o){if(!s.request||!s.request.request)throw s;if(s.status>=400&&!e.doNotRetry.includes(s.status)){const n=o.request.retries!=null?o.request.retries:e.retries,u=Math.pow((o.request.retryCount||0)+1,2);throw t.retry.retryRequest(s,n,u)}throw s}async function $t(e,t,s,o){const n=new gr;return n.on("failed",function(u,l){const g=~~u.request.request.retries,m=~~u.request.request.retryAfter;if(o.request.retryCount=l.retryCount+1,g>l.retryCount)return m*e.retryAfterBaseValue}),n.schedule(xt.bind(null,e,t,s),o)}async function xt(e,t,s,o){const n=await s(s,o);if(n.data&&n.data.errors&&n.data.errors.length>0&&/Something went wrong while executing your query/.test(n.data.errors[0].message)){const u=new W(n.data.errors[0].message,500,{request:o,response:n});return dr(e,t,u,o)}return n}function mr(e,t){const s=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,410,422,451],retries:3},t.retry);return s.enabled&&(e.hook.error("request",dr.bind(null,s,e)),e.hook.wrap("request",$t.bind(null,s,e))),{retry:{retryRequest:(o,n,u)=>(o.request.request=Object.assign({},o.request.request,{retries:n,retryAfter:u}),o)}}}mr.VERSION=jt;var Bt="0.0.0-development",ie=()=>Promise.resolve();function Ht(e,t,s){return e.retryLimiter.schedule(Wt,e,t,s)}async function Wt(e,t,s){const{pathname:o}=new URL(s.url,"http://github.test"),n=Vt(s.method,o),u=!n&&s.method!=="GET"&&s.method!=="HEAD",l=s.method==="GET"&&o.startsWith("/search/"),g=o.startsWith("/graphql"),T=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(T.expiration=1e3*60),(u||g)&&await e.write.key(e.id).schedule(T,ie),u&&e.triggersNotification(o)&&await e.notifications.key(e.id).schedule(T,ie),l&&await e.search.key(e.id).schedule(T,ie);const _=(n?e.auth:e.global).key(e.id).schedule(T,t,s);if(g){const f=await _;if(f.data.errors!=null&&f.data.errors.some(v=>v.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:f,data:f.data})}return _}function Vt(e,t){return e==="PATCH"&&/^\/applications\/[^/]+\/token\/scoped$/.test(t)||e==="POST"&&(/^\/applications\/[^/]+\/token$/.test(t)||/^\/app\/installations\/[^/]+\/access_tokens$/.test(t)||t==="/login/oauth/access_token")}var Nt=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/issues/{issue_number}/sub_issue","/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function Mt(e){const s=`^(?:${e.map(o=>o.split("/").map(n=>n.startsWith("{")?"(?:.+?)":n).join("/")).map(o=>`(?:${o})`).join("|")})[^/]*$`;return new RegExp(s,"i")}var Je=Mt(Nt),hr=Je.test.bind(Je),D={},zt=function(e,t){D.global=new e.Group({id:"octokit-global",maxConcurrent:10,...t}),D.auth=new e.Group({id:"octokit-auth",maxConcurrent:1,...t}),D.search=new e.Group({id:"octokit-search",maxConcurrent:1,minTime:2e3,...t}),D.write=new e.Group({id:"octokit-write",maxConcurrent:1,minTime:1e3,...t}),D.notifications=new e.Group({id:"octokit-notifications",maxConcurrent:1,minTime:3e3,...t})};function ge(e,t){const{enabled:s=!0,Bottleneck:o=gr,id:n="no-id",timeout:u=1e3*60*2,connection:l}=t.throttle||{};if(!s)return{};const g={timeout:u};typeof l<"u"&&(g.connection=l),D.global==null&&zt(o,g);const m=Object.assign({clustering:l!=null,triggersNotification:hr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new o,id:n,...D},t.throttle);if(typeof m.onSecondaryRateLimit!="function"||typeof m.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);const T={},_=new o.Events(T);return T.on("secondary-limit",m.onSecondaryRateLimit),T.on("rate-limit",m.onRateLimit),T.on("error",f=>e.log.warn("Error in throttling-plugin limit handler",f)),m.retryLimiter.on("failed",async function(f,v){const[w,F,R]=v.args,{pathname:y}=new URL(R.url,"http://github.test");if(!(y.startsWith("/graphql")&&f.status!==401||f.status===403||f.status===429))return;const A=~~F.retryCount;F.retryCount=A,R.request.retryCount=A;const{wantRetry:M,retryAfter:$=0}=await async function(){var x;if(/\bsecondary rate\b/i.test(f.message)){const C=Number(f.response.headers["retry-after"])||w.fallbackSecondaryRateRetryAfter;return{wantRetry:await _.trigger("secondary-limit",C,R,e,A),retryAfter:C}}if(f.response.headers!=null&&f.response.headers["x-ratelimit-remaining"]==="0"||(((x=f.response.data)==null?void 0:x.errors)??[]).some(C=>C.type==="RATE_LIMITED")){const C=new Date(~~f.response.headers["x-ratelimit-reset"]*1e3).getTime(),L=Math.max(Math.ceil((C-Date.now())/1e3)+1,0);return{wantRetry:await _.trigger("rate-limit",L,R,e,A),retryAfter:L}}return{}}();if(M)return F.retryCount++,$*w.retryAfterBaseValue}),e.hook.wrap("request",Ht.bind(null,m)),{}}ge.VERSION=Bt;ge.triggersNotification=hr;var Kt="7.1.6";sr.defaults({userAgent:`octokit-oauth-app.js/${Kt} ${N()}`});var Qt="0.0.0-development",cs=sr.plugin(pr,ir,Rt,mr,ge).defaults({userAgent:`octokit.js/${Qt}`,throttle:{onRateLimit:Jt,onSecondaryRateLimit:Yt}});function Jt(e,t,s){if(s.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return s.log.info(`Retrying after ${e} seconds!`),!0}function Yt(e,t,s){if(s.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return s.log.info(`Retrying after ${e} seconds!`),!0}export{cs as O,Sr as g};
